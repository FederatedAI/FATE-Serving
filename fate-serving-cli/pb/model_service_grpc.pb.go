/*
 * Copyright 2019 The FATE Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 // Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModelServiceClient interface {
	PublishLoad(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	PublishBind(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	PublishOnline(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	QueryModel(ctx context.Context, in *QueryModelRequest, opts ...grpc.CallOption) (*QueryModelResponse, error)
	Unload(ctx context.Context, in *UnloadRequest, opts ...grpc.CallOption) (*UnloadResponse, error)
	Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindResponse, error)
	FetchModel(ctx context.Context, in *FetchModelRequest, opts ...grpc.CallOption) (*FetchModelResponse, error)
	ModelTransfer(ctx context.Context, in *ModelTransferRequest, opts ...grpc.CallOption) (*ModelTransferResponse, error)
}

type modelServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModelServiceClient(cc grpc.ClientConnInterface) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) PublishLoad(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/com.webank.ai.fate.api.mlmodel.manager.ModelService/publishLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) PublishBind(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/com.webank.ai.fate.api.mlmodel.manager.ModelService/publishBind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) PublishOnline(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/com.webank.ai.fate.api.mlmodel.manager.ModelService/publishOnline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) QueryModel(ctx context.Context, in *QueryModelRequest, opts ...grpc.CallOption) (*QueryModelResponse, error) {
	out := new(QueryModelResponse)
	err := c.cc.Invoke(ctx, "/com.webank.ai.fate.api.mlmodel.manager.ModelService/queryModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) Unload(ctx context.Context, in *UnloadRequest, opts ...grpc.CallOption) (*UnloadResponse, error) {
	out := new(UnloadResponse)
	err := c.cc.Invoke(ctx, "/com.webank.ai.fate.api.mlmodel.manager.ModelService/unload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) Unbind(ctx context.Context, in *UnbindRequest, opts ...grpc.CallOption) (*UnbindResponse, error) {
	out := new(UnbindResponse)
	err := c.cc.Invoke(ctx, "/com.webank.ai.fate.api.mlmodel.manager.ModelService/unbind", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) FetchModel(ctx context.Context, in *FetchModelRequest, opts ...grpc.CallOption) (*FetchModelResponse, error) {
	out := new(FetchModelResponse)
	err := c.cc.Invoke(ctx, "/com.webank.ai.fate.api.mlmodel.manager.ModelService/fetchModel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) ModelTransfer(ctx context.Context, in *ModelTransferRequest, opts ...grpc.CallOption) (*ModelTransferResponse, error) {
	out := new(ModelTransferResponse)
	err := c.cc.Invoke(ctx, "/com.webank.ai.fate.api.mlmodel.manager.ModelService/modelTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
// All implementations must embed UnimplementedModelServiceServer
// for forward compatibility
type ModelServiceServer interface {
	PublishLoad(context.Context, *PublishRequest) (*PublishResponse, error)
	PublishBind(context.Context, *PublishRequest) (*PublishResponse, error)
	PublishOnline(context.Context, *PublishRequest) (*PublishResponse, error)
	QueryModel(context.Context, *QueryModelRequest) (*QueryModelResponse, error)
	Unload(context.Context, *UnloadRequest) (*UnloadResponse, error)
	Unbind(context.Context, *UnbindRequest) (*UnbindResponse, error)
	FetchModel(context.Context, *FetchModelRequest) (*FetchModelResponse, error)
	ModelTransfer(context.Context, *ModelTransferRequest) (*ModelTransferResponse, error)
	mustEmbedUnimplementedModelServiceServer()
}

// UnimplementedModelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (*UnimplementedModelServiceServer) PublishLoad(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishLoad not implemented")
}
func (*UnimplementedModelServiceServer) PublishBind(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishBind not implemented")
}
func (*UnimplementedModelServiceServer) PublishOnline(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishOnline not implemented")
}
func (*UnimplementedModelServiceServer) QueryModel(context.Context, *QueryModelRequest) (*QueryModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryModel not implemented")
}
func (*UnimplementedModelServiceServer) Unload(context.Context, *UnloadRequest) (*UnloadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unload not implemented")
}
func (*UnimplementedModelServiceServer) Unbind(context.Context, *UnbindRequest) (*UnbindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unbind not implemented")
}
func (*UnimplementedModelServiceServer) FetchModel(context.Context, *FetchModelRequest) (*FetchModelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchModel not implemented")
}
func (*UnimplementedModelServiceServer) ModelTransfer(context.Context, *ModelTransferRequest) (*ModelTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelTransfer not implemented")
}
func (*UnimplementedModelServiceServer) mustEmbedUnimplementedModelServiceServer() {}

func RegisterModelServiceServer(s *grpc.Server, srv ModelServiceServer) {
	s.RegisterService(&_ModelService_serviceDesc, srv)
}

func _ModelService_PublishLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).PublishLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.webank.ai.fate.api.mlmodel.manager.ModelService/PublishLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).PublishLoad(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_PublishBind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).PublishBind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.webank.ai.fate.api.mlmodel.manager.ModelService/PublishBind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).PublishBind(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_PublishOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).PublishOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.webank.ai.fate.api.mlmodel.manager.ModelService/PublishOnline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).PublishOnline(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_QueryModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).QueryModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.webank.ai.fate.api.mlmodel.manager.ModelService/QueryModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).QueryModel(ctx, req.(*QueryModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_Unload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).Unload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.webank.ai.fate.api.mlmodel.manager.ModelService/Unload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).Unload(ctx, req.(*UnloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_Unbind_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).Unbind(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.webank.ai.fate.api.mlmodel.manager.ModelService/Unbind",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).Unbind(ctx, req.(*UnbindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_FetchModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchModelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).FetchModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.webank.ai.fate.api.mlmodel.manager.ModelService/FetchModel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).FetchModel(ctx, req.(*FetchModelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_ModelTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).ModelTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.webank.ai.fate.api.mlmodel.manager.ModelService/ModelTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).ModelTransfer(ctx, req.(*ModelTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.webank.ai.fate.api.mlmodel.manager.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "publishLoad",
			Handler:    _ModelService_PublishLoad_Handler,
		},
		{
			MethodName: "publishBind",
			Handler:    _ModelService_PublishBind_Handler,
		},
		{
			MethodName: "publishOnline",
			Handler:    _ModelService_PublishOnline_Handler,
		},
		{
			MethodName: "queryModel",
			Handler:    _ModelService_QueryModel_Handler,
		},
		{
			MethodName: "unload",
			Handler:    _ModelService_Unload_Handler,
		},
		{
			MethodName: "unbind",
			Handler:    _ModelService_Unbind_Handler,
		},
		{
			MethodName: "fetchModel",
			Handler:    _ModelService_FetchModel_Handler,
		},
		{
			MethodName: "modelTransfer",
			Handler:    _ModelService_ModelTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model_service.proto",
}
